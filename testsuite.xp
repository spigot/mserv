#!/usr/bin/expect
#-*-sh-*-

# This expect script performs some basic testing of mserv.  It
# requires two user accounts to exist; "johan" with password "johan"
# and "root" with password "root".  "johan" should be a normal user
# and "root" a superuser.  It also requires at least one song in one
# album and an otherwise working configuration.
#
# This script must be run when mserv has just started, as it expects
# no history entries and nobody logged in to start with.  A successful
# run ends with mserv being shut down.
#
# A failed run ends either with an error message or that the script
# execution just hangs

# Hang if something unexpected happens
set timeout -1

# Log in as Johan and mess around
spawn telnet localhost 4444
set humanjohan $spawn_id
expect "USER"
send "user johan\n"
expect "PASS"
send "pass johan\n"
expect "Welcome johan"

# Log in as a computerized Johan and lurk
spawn telnet localhost 4444
set computerjohan $spawn_id
expect "USER"
send "user johan\n"
expect "PASS"
send "pass johan rtcomputer\n"
expect "202"
expect "Welcome johan"
expect -i $humanjohan "johan has connected"

send "history\n"
expect "412 There are no entries in the history"

# Default to operating on the human user
set spawn_id $humanjohan

send "who\n"
expect "The following people are online"
expect "johan"
expect "johan"

send "agdgdaagdgad\n"
expect "not understood"

# Test only bogus rating commands, root will test actual re-ratings
send "rate\n"
expect "Bad rate type"
send "rate neutral\n"
expect "Nothing playing"
send "rate 999999 neutral\n"
expect "No such album"
send "rate 1 999999 neutral\n"
expect "No such track"

send "ratings\n"
expect "Nothing playing"
send "ratings 1 1\n"
expect "Ratings of track"

send "history\n"
expect "no entries"

send "userinfo\n"
expect "User johan"
expect "Satisfaction:"
send "userinfo root\n"
expect "User root"
expect "Satisfaction:"

send "tracks\n"
expect "Nothing playing"
send "tracks 1\n"
expect "Tracks in album"

send "asearch kljhlkhufwiuytrqwerfskhuiwregf\n"
expect "No albums matching"

send "search kljhlkhufwiuytrqwerfskhuiwregf\n"
expect "No tracks matching"

send "status\n"
expect "Nothing currently playing"

send "stop\n"
expect "Nothing playing"

send "pause\n"
expect "Nothing playing"

send "top\n"
expect "Most likely to be played tracks"

send "albums\n"
expect "Albums available"

send "queue\n"
expect "no tracks in the queue"
send "queue 1 1\n"
expect "The following tracks have been added to the queue"
expect -i $computerjohan "=618\tjohan"
expect -i $computerjohan "=619\tjohan\t1\t1"

send "queue\n"
expect "The following tracks are in the queue"
send "unqueue 1 1\n"
expect "unqueued by johan"
expect -i $computerjohan "=627\tjohan\t1\t1"

send "next\n"
expect "Nothing playing"

send "volume\n"
expect "Volume is currently"

send "info\n"
expect "Nothing playing"
send "info 1\n"
expect "Album name"
send "info 1 1\n"
expect "Track name"

# Start playing and try some commands again
send "play\n"
expect "Playing"
expect -i $computerjohan "=622\trandom"

send "status\n"
expect "Track name"

send "ratings\n"
expect "Ratings of track"

send "history\n"
expect "The following tracks were recently played"

send "tracks\n"
expect "Tracks in album"

send "pause\n"
expect "paused"
expect -i $computerjohan "=606\tjohan"

send "pause\n"
expect "Already paused"

send "play\n"
expect "resumed by johan"
expect -i $computerjohan "=605\tjohan"

send "next\n"
expect "Track skipped"
expect "Playing:"
expect -i $computerjohan "=629\tjohan"
expect -i $computerjohan "=622\trandom"

send "info\n"
expect "Track name"

send "play\n"
expect "Already playing"

send "stop\n"
expect "stopped"
expect -i $computerjohan "=623\tjohan"

send "quit\n"
expect "Goodbye"
expect -i $computerjohan "=601\tjohan"
wait

# Log johan back in so we can do the same thing all over, only this
# time it will be the computer client that does all the work and the
# human only verifies that it gets notified about what happens.
spawn telnet localhost 4444
set humanjohan $spawn_id
expect "USER"
send "user johan\n"
expect "PASS"
send "pass johan\n"
expect "Welcome johan"
expect -i $computerjohan "=600\tjohan"

# Default to operating on the computer user
set spawn_id $computerjohan

send "who\n"
expect "226 The following people are online"
expect "johan"
expect "johan"

send "agdgdaagdgad\n"
expect "500 Command not understood"

# Test only bogus rating commands, root will test actual re-ratings
send "rate\n"
expect "518 Bad rate type"
send "rate neutral\n"
expect "401 Nothing playing"
send "rate 999999 neutral\n"
expect "508 No such album"
send "rate 1 999999 neutral\n"
expect "509 No such track"

send "ratings\n"
expect "401 Nothing playing"
send "ratings 1 1\n"
expect "229 Ratings of track"

send "status\n"
expect "224 Nothing currently playing"

send "history\n"
expect "241 The following tracks were recently played"

send "userinfo\n"
expect "246 User johan"
expect "johan\tjohan\t"
send "userinfo root\n"
expect "246 User root"
expect "root\tjohan\t"

send "tracks\n"
expect "401 Nothing playing"
send "tracks 1\n"
expect "228 Tracks in album"

send "asearch kljhlkhufwiuytrqwerfskhuiwregf\n"
expect "538 No albums"

send "search kljhlkhufwiuytrqwerfskhuiwregf\n"
expect "520 No tracks"

send "stop\n"
expect "401 Nothing playing"

send "pause\n"
expect "401 Nothing playing"

send "top\n"
expect "234 Most likely to be played"

send "albums\n"
expect "227 Albums available"

send "queue\n"
expect "404 There are no tracks in the queue"
send "queue 1 1\n"
expect "247 The following tracks have been added to the queue"

send "queue\n"
expect "225 The following tracks are in the queue"
send "unqueue 1 1\n"
expect "254 Track"

send "next\n"
expect "401 Nothing playing"

send "volume\n"
expect "235 Volume is currently"

send "info\n"
expect "401 Nothing playing"
send "info 1\n"
expect "245 Album 1"
send "info 1 1\n"
expect "246 Album 1, track 1"

# Start playing and try some commands again
send "play\n"
expect "230 Play commenced"

send "status\n"
expect "222 Playing"

send "ratings\n"
expect "229 Ratings of track"

send "tracks\n"
expect "228 Tracks in album"

send "pause\n"
expect "232 Play paused"

send "pause\n"
expect "406 Already paused"

send "play\n"
expect "230 Play commenced"

send "next\n"
expect "240 Moved to next track"

send "info\n"
expect "246 Album"

send "play\n"
expect "402 Already playing"

send "stop\n"
expect "231 Play stopped"

send "quit\n"
expect "220 Goodbye"
wait

# Log the computer johan back in so he can be kicked off by root
spawn telnet localhost 4444
set computerjohan $spawn_id
expect "USER"
send "user johan\n"
expect "PASS"
send "pass johan rtcomputer\n"
expect "202"
expect "Welcome johan"
expect -i $humanjohan "johan has connected"

# Log in as root for testing root-only commands
spawn telnet localhost 4444
set rootlogin $spawn_id
expect "USER"
send "user root\n"
expect "PASS"
send "pass root\n"
expect "Welcome root"

# Verify that both Johans are still logged in
send "who\n"
expect "johan"
expect "johan"

send "kick johan\n"
expect "User johan has disconnected"

# Verify that the Johans actually disappeared
send "who\n"
expect "1 connected, 1 total"

# Verify that the human Johan got notified
set spawn_id $humanjohan
expect {
	eof { send_error "*** Human kicked without notification!!\n" ; exit 1 }
	"You have been kicked off"
}
wait

# Verify that the computer Johan gets notified
set spawn_id $computerjohan
expect {
	eof { send_error "*** Computer kicked without notification!!\n" ; exit 1 }
	"=526 You have been kicked off"
}
wait

# Back to root
set spawn_id $rootlogin

# Test ratings.  Better do this as root so we don't mess up Johan's
# ratings...
send "rate 1 1 awful\n"
expect "The track 1/1 has been rated AWFUL by root"
send "rate 1 1 bad\n"
expect "The track 1/1 has been rated BAD by root"
send "rate 1 1 good\n"
expect "The track 1/1 has been rated GOOD by root"
send "rate 1 1 superb\n"
expect "The track 1/1 has been rated SUPERB by root"
send "rate 1 1 neutral\n"
expect "The track 1/1 has been rated NEUTRAL by root"

send "ratings 1 1\n"
expect "root"
expect "NEUTRAL"

send "info 1 1\n"
expect "NEUTRAL"

send "play\n"
expect "Playing"

send "rate neutral\n"
expect "This track has been rated NEUTRAL by root"

send "ratings\n"
expect "root"
expect "NEUTRAL"

send "info\n"
expect "NEUTRAL"

send "stop\n"
expect "stopped"

send "shutdown\n"
expect "shutdown by root"
wait
